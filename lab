Program 6
#include<stdio.h>
void heapify(int a[],int n)
{
    int i,j,k,item;
    for(k=1;k<n;k++)
    {
        item=a[k];
        i=k;
        j=(i-1)/2;
        while(i>0 && item>a[j])
        {
            a[i]=a[j];
            i=j;
            j=(i-1)/2;
        }
        a[i]=item;
    }

}

void adjust(int a[],int n)
{
    int i,j,item;
    j=0;
    item=a[j];
    i=2*j+1;
    while(i<=n-1)
    {
        if(i+1<=n-1)
        if(a[i]<a[i+1])
        i++;
        if(item<a[i])
        {
            a[j]=a[i];
            j=i;
            i=2*j+1;
        }
        else
        break;

    }
    a[j]=item;
}

void heapsort(int a[],int n)
{
    int i,temp;
    heapify(a,n);
    for(i=n-1;i>0;i--)
    {
        temp=a[0];
        a[0]=a[i];
        a[i]=temp;
        adjust(a,i);
    }
}

int main()
{
int a[20],n,temp,i;
printf("enter the number of elements to sort\n");
scanf("%d",&n);
printf("enter elements to sort\n");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
heapsort(a,n);
printf("the sorted array is\n");
for(i=0;i<n;i++)
{
printf("%d\t",a[i]);
}
}

Program 7
#include<stdio.h>
int max(int a,int b)
{
 return a>b?a:b;
}

void knapsack(int n,int w[],int m,int v[][10],int p[])
{
int i,j;

for(i=0;i<=n;i++)
 {
 for(j=0;j<=m;j++)
  {
 if(i==0||j==0)
  v[i][j]=0;
 else if(j<w[i])
  v[i][j]=v[i-1][j];
 else
  v[i][j]=max(v[i-1][j],v[i-1][j-w[i]]+p[i]);

  }
 }
}

void print_optimal_sol(int n,int m,int w[],int v[10][10])
{
int i,j,x[10];
printf("\nThe optimal solution is %d:\n",v[n][m]);

/*Initially no object is selected*/

for(i=0;i<n;i++)
 x[i]=0;
i=n; /*number of objects*/
j=m;/*capacity of knapsack*/

while(i!=0  && j!=0)
 {
 if(v[i][j]!=v[i-1][j])
  {
  x[i]=1;
  j=j-w[i];
  }
 i=i-1;
 }
/*output the objects selected*/

for(i=1;i<=n;i++)
{
printf("x[%d]",i);
}
printf("=");
for(i=1;i<=n;i++)
 {
 printf("%d  ",x[i]);
 }
}

int main()
{
int m,n,i,j;
int p[10];
int w[10],v[10][10];
printf("\n Enter the number of objects\n");
scanf("%d",&n);
printf("\nEnter the weights of n objects:");
for(i=1;i<=n;i++)
 scanf("%d",&w[i]);
printf("Enter the profits of n objects\n");
for(i=1;i<=n;i++)
 scanf("%d",&p[i]);

printf("\nEnter the capacity of knapsack\n");
scanf("%d",&m);

knapsack(n,w,m,v,p);

printf("The output is\n");
for(i=0;i<=n;i++)
{
 for(j=0;j<=m;j++)
 {
  printf("%d   ",v[i][j]);
 }
  printf("\n");
}
print_optimal_sol(n,m,w,v);
}

Program 8
#include<stdio.h>
#include<conio.h>
 #include<stdlib.h>
int cost[10][10],n;

int find(int node, int parent[10])
{
while(parent[node]!=node)
 node=parent[node];
return node;
}

int union_ij(int i,int j,int parent[10])
{
if(i<j)
parent[j]=i;

else
parent[i]=j;
}



void kruskal_mst()
{
int count, i, parent[10], min, u, v, k, t[10][2], sum,j;
count=0,sum=0,k=0;
for(i=0;i<n;i++)
parent[i]=i;

while(count<n)
{
min=999;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(cost[i][j]<min)
{
min=cost[i][j];
u=i;
v=j;
}
}
}
if(min==999)break;
i=find(u,parent);
j=find(v,parent);
if(i!=j)
{
t[k][0]=u;
t[k][1]=v;
k++;
 count++;

sum=sum+min;
 union_ij(i,j,parent);
}
cost[u][v]=cost[v][u]=999;
}

if(count==n-1)
{
printf("\nSpanning Tree Exists");
printf("\nThe cost of MST = %d",sum);
printf("\nSpanning tree is shown below:");
for(k=0;k<n-1;k++)
printf("\n%d-->%d",t[k][0],t[k][1]);
return;
}

else
printf("\nSpanning tree do not exist");
}

int main()
{
int i, j;
printf("\n\n\tImplementation of Kruskal's algorithm\n\n");
 printf("\nEnter the no. of vertices\n");
scanf("%d",&n);
printf("\nEnter the cost adjacency matrix\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
scanf("%d",&cost[i][j]);
if(cost[i][j]==0)
cost[i][j]=999;
}
}
kruskal_mst();
}

Program 9
#include<stdio.h>
#include<conio.h>
 #include<stdlib.h>
int cost[10][10],n;

int find(int node, int parent[10])
{
while(parent[node]!=node)
 node=parent[node];
return node;
}

int union_ij(int i,int j,int parent[10])
{
if(i<j)
parent[j]=i;

else
parent[i]=j;
}



void kruskal_mst()
{
int count, i, parent[10], min, u, v, k, t[10][2], sum,j;
count=0,sum=0,k=0;
for(i=0;i<n;i++)
parent[i]=i;

while(count<n)
{
min=999;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(cost[i][j]<min)
{
min=cost[i][j];
u=i;
v=j;
}
}
}
if(min==999)break;
i=find(u,parent);
j=find(v,parent);
if(i!=j)
{
t[k][0]=u;
t[k][1]=v;
k++;
 count++;

sum=sum+min;
 union_ij(i,j,parent);
}
cost[u][v]=cost[v][u]=999;
}

if(count==n-1)
{
printf("\nSpanning Tree Exists");
printf("\nThe cost of MST = %d",sum);
printf("\nSpanning tree is shown below:");
for(k=0;k<n-1;k++)
printf("\n%d-->%d",t[k][0],t[k][1]);
return;
}

else
printf("\nSpanning tree do not exist");
}

int main()
{
int i, j;
printf("\n\n\tImplementation of Kruskal's algorithm\n\n");
 printf("\nEnter the no. of vertices\n");
scanf("%d",&n);
printf("\nEnter the cost adjacency matrix\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
scanf("%d",&cost[i][j]);
if(cost[i][j]==0)
cost[i][j]=999;
}
}
kruskal_mst();
}

Program 10
#include<stdio.h>
int count=0;
int w[10];
int d;
int x[10];

void subset(int cs,int k,int r)
{
    int i;
    x[k]=1;

    if(cs+w[k]==d)
    {
        printf("\nSubset solution=%d\n",++count);
        for(i=0;i<=k;i++)
        {
            if(x[i]==1)
                printf("%d    ",w[i]);
        }
    }
    else if(cs+w[k]+w[k+1]<=d)
        subset(cs+w[k],k+1,r-w[k]);
    if((cs+r-w[k]>=d)&&(cs+w[k+1]<=d))
    {
        x[k]=0;
        subset(cs,k+1,r-w[k]);
    }
}

int main()
{

    int sum=0,i,n;
    printf("\nEnter the number of elements\n");
    scanf("%d",&n);

    printf("\nEnter the elements in ascending order:\n");
    for(i=0;i<n;i++)
        scanf("%d",&w[i]);

    printf("\nEnter the required sum:");
    scanf("%d",&d);

    for(i=0;i<n;i++)
            sum+=w[i];

    if(sum<d)
    {
        printf("\nNo solution exists\n");
        return;
    }
    printf("\nThe solution is:\n");
    subset(0,0,sum);
}
